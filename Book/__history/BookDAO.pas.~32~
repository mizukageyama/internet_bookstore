unit BookDAO;

interface

uses
  Book, BookDAOIntf, MVCFramework, MVCFramework.Commons,
  MVCFramework.Serializer.Commons, MVCFramework.ActiveRecord, BaseController,
  System.Generics.Collections, system.SysUtils;

type
  TBookDAO = class(TInterfacedObject, IBookDAO)
  public
    function CreateBook(const Book: TBook): Boolean;
    function GetBooks: TObjectList<TBook>;
    function GetBookById(const BookId: Integer): TBook;
    function UpdateBook(const BookId: Integer; const Book: TBook): Boolean;
    procedure DeleteBook(const BookId: Integer);
  end;

implementation

{ TBookDAO }
function TBookDAO.CreateBook(const Book: TBook): Boolean;
begin
  try
    Book.Insert;
    Result := True;
  except
    on E: Exception do
      Result := False;
  end;
end;

procedure TBookDAO.DeleteBook(const BookId: Integer);
begin
  var Book := TMVCActiveRecord.GetByPK<TBook>(BookId, True);

  if Book = nil then
    raise EMVCActiveRecordNotFound.Create(Classname + ', Book not found');

  try
    Book.Delete;
  except
    on E: Exception do
      raise Exception.Create(Classname + ', Failed to delete book: ' +
        E.Message);
  end;
end;

function TBookDAO.GetBookById(const BookId: Integer): TBook;
begin
  var Book := TMVCActiveRecord.GetByPK<TBook>(BookId, True);

  if Book = nil then
    raise EMVCActiveRecordNotFound.Create(Classname + ', Book not found');

  Result := Book;
end;

function TBookDAO.GetBooks: TObjectList<TBook>;
begin
  Result := TMVCActiveRecord.All<TBook>;
end;

function TBookDAO.UpdateBook(const BookId: Integer; const Book: TBook): Boolean;
begin
  var BookById := TMVCActiveRecord.GetByPK<TBook>(BookId, True);

  if BookById = nil then
    raise EMVCActiveRecordNotFound.Create(Classname + ', Book not found');

  try
    Book.Update;
  except
    on E: Exception do
      raise Exception.Create(Classname + ', Failed to update book: ' +
        E.Message);
  end;
end;

end.
