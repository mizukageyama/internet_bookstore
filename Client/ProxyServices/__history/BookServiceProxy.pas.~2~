unit BookServiceProxy;

interface

uses
  BookServiceIntf, BookApiIntf, Book, System.Generics.Collections,
  System.SysUtils, MVCFramework.RESTClient.Intf, MVCFramework.RESTClient;

type
  TBookServiceProxy = class(TInterfacedObject, IBookService)
  private
    FRESTClient: IMVCRESTClient;
    const
      ENDPOINT = '/api/books';
  public
    constructor Create;
    destructor Destroy;

    procedure CreateBook(const Book: TBook);
    function GetBooks: TObjectList<TBook>;
    function GetBookById(const BookId: Integer): TBook;
    procedure UpdateBook(const Book: TBook);
    procedure DeleteBook(const BookId: Integer);
  end;

implementation

{ TBookServiceProxy }

constructor TBookServiceProxy.Create;
begin
  FRESTClient := TMVCRESTClient.New.BaseURL('localhost', 8080);
end;

destructor TBookServiceProxy.Destroy;
begin
  FRESTClient := nil;
end;

procedure TBookServiceProxy.CreateBook(const Book: TBook);
var
  Response: IMVCRESTResponse;
begin
  FRESTClient.SetBearerAuthorization('token');
  FRESTClient.AddBody(Book.ToJSONBody, 'application/json');
  Response := FRESTClient.POST(ENDPOINT);

  if Response.StatusCode <> 201 then
    raise Exception.Create('Unable to create book');

  Result := Response.Content;
end;

function TBookServiceClient.DeleteBook(const BookId: Integer): string;
begin
  var Response := FApi.DeleteBook(BookId);

  if Response.StatusCode <> 204 then
    raise Exception.Create('Unable to delete book');

  Result := Response.Content;
end;

function TBookServiceClient.GetBookById(const BookId: Integer): string;
begin
  var Response := FApi.DeleteBook(BookId);

  if Response.StatusCode <> 200 then
    raise Exception.Create('Something went wrong');

  Result := Response.Content;
end;

function TBookServiceClient.GetBooks: string;
begin
  var Response := FApi.GetBooks;

  if Response.StatusCode <> 200 then
    raise Exception.Create('Something went wrong');

  Result := Response.Content;
end;

function TBookServiceClient.UpdateBook(const Book: TBook): string;
begin
  var Response := FApi.UpdateBook(Book.ToJSONBody);

  if Response.StatusCode <> 200 then
    raise Exception.Create('Unable to update book');

  Result := Response.Content;
end;

end.
