unit WriteReviewPresenter;

interface

uses
  WriteReviewPresenterIntf, WriteReviewFrmIntf, CustomerReviewServiceIntf,
  System.SysUtils, CustomerReview, Book;

type
  TWriteReviewPresenter = class(TInterfacedObject, IWriteReviewPresenter)
  private
    FWriteReviewView: IWriteReviewView;
    FCustomerReviewServiceProxy: ICustomerReviewService;
    FBook: TBook;
  public
    constructor Create(AWriteReviewView: IWriteReviewView;
      ACustomerReviewService: ICustomerReviewService; ABook: TBook);

    procedure InitializeView;
    procedure SubmitReview;
    procedure ValidateInput(out CustomerReview: TCustomerReview;
      out IsSuccess: Boolean);
  end;

implementation

uses
  CustomerSession, BookDetailsFrmIntf, BookDetailsFrm, BookServiceProxy,
  StatusCodeException, SysConst;

{ TWriteReviewPresenter }

constructor TWriteReviewPresenter.Create(AWriteReviewView: IWriteReviewView;
  ACustomerReviewService: ICustomerReviewService; ABook: TBook);
begin
  FWriteReviewView := AWriteReviewView;
  FCustomerReviewServiceProxy := ACustomerReviewService;
  FWriteReviewView.SetPresenter(Self);
  FBook := ABook;
end;

procedure TWriteReviewPresenter.InitializeView;
begin
  FWriteReviewView.DisplayBookTitle(FBook);
  var CustomerSession := TCustomerSession.Instance;
  var Customer := CustomerSession.GetLoggedInCustomer;
  FWriteReviewView.DisplayCustomerGreeting(Customer);
end;

procedure TWriteReviewPresenter.SubmitReview;
var
  CustomerReview: TCustomerReview;
  IsValidationSuccess: Boolean;
begin
  CustomerReview := TCustomerReview.Create;
  ValidateInput(CustomerReview, IsValidationSuccess);

  if not IsValidationSuccess then
    Exit;

  var CustomerSession := TCustomerSession.Instance;
  var Customer := CustomerSession.GetLoggedInCustomer;
  CustomerReview.CustomerId := Customer.Id;
  CustomerReview.BookId := FBook.Id;

  try
    FCustomerReviewServiceProxy.CreateCustomerReview(CustomerReview);
    FWriteReviewView.ShowMessageDialog('Review is sent to admin for approval');
    FWriteReviewView.CloseForm;
  except
    on E: TStatusCodeException do
    //on E: EUnAuthorizedException do
    //on E: ENotFoundException do
    //else
    begin
      case E.StatusCode of
        UnAuthorized:
          begin
            CustomerSession.SetDefaultValue;
            FWriteReviewView.ShowMessageDialog('Session expired. Please login');
            FWriteReviewView.CloseForm;
          end;
        NotFound: FWriteReviewView.ShowMessageDialog('Book no longer exists');
      else
        FWriteReviewView.ShowMessageDialog(E.ToString);
      end;
   end;
  end;
end;

procedure TWriteReviewPresenter.ValidateInput(out CustomerReview:
  TCustomerReview; out IsSuccess: Boolean);
var
  ReviewInput: string;
  RatingInput: string;
  Rating: Integer;
begin
  ReviewInput := FWriteReviewView.GetReviewText;
  RatingInput := FWriteReviewView.GetReviewRating;

  CustomerReview.Review := ReviewInput;
  IsSuccess := True;
  FWriteReviewView.HideValidationMessage;

  if TryStrToInt(RatingInput, Rating) then
  begin
    CustomerReview.Rating := Rating;
    if not CustomerReview.IsRatingInRange then
    begin
      FWriteReviewView.ShowRatingValidationMessage(
        'Rating should be within 1-5 range');
      IsSuccess := False;
    end;
  end
  else
  begin
    FWriteReviewView.ShowRatingValidationMessage('Rating should be a number');
    IsSuccess := False;
  end;

  if CustomerReview.IsMoreThan1MB then
  begin
    FWriteReviewView.ShowReviewValidationMessage(
      'Review should be less than 1MB');
    IsSuccess := False;
  end;

  if CustomerReview.IsTooShort then
  begin
    FWriteReviewView.ShowReviewValidationMessage(
      'Review should not be less than 10 characters');
    IsSuccess := False;
  end;
end;

end.
