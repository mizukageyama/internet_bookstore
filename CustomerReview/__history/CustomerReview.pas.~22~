unit CustomerReview;

interface

uses
  MVCFramework.Serializer.Commons,
  MVCFramework.ActiveRecord,
  MVCFramework.Nullables,
  MVCFramework.Commons,
  MVCFramework.SQLGenerators.MySQL,
  System.SysUtils,
  System.Generics.Collections;

type
  [MVCNameCase(ncCamelCase)]
  [MVCTable('customer_review')]
  TCustomerReview = class(TMVCActiveRecord)
  private
    [MVCTableField('ID', [foPrimaryKey, foAutoGenerated])]
    FId: Integer;
    [MVCTableField('CUSTOMER_ID')]
    FCustomerId: Integer;
    [MVCTableField('BOOK_ID')]
    FBookId: Integer;
    [MVCTableField('REVIEW')]
    FReview: string;
    [MVCTableField('RATING')]
    FRating: Integer;
  public
    function IsValid: Boolean;
    function IsMoreThan1MB: Boolean;
    property Id: Integer read FId write FId;
    property BookId: Integer read FBookId write FBookId;
    property CustomerId: Integer read FCustomerId write FCustomerId;
    property Review: string read FReview write FReview;
    property Rating: Integer read FRating write FRating;
  end;

implementation

{ TCustomerReview }

function TCustomerReview.IsMoreThan1MB: Boolean;
var
  Str: string;
  MaxSizeBytes: Integer;
begin
  Str := 'Your string here'; // Replace with your actual string
  MaxSizeBytes := 1 * 1024 * 1024; // 1 MB in bytes

  if Length(Str) * SizeOf(Char) <= MaxSizeBytes then
    Writeln('The string is approximately 1 MB or less.')
  else
    Writeln('The string is larger than 1 MB.');
end;

function TCustomerReview.IsValid: Boolean;
begin
  Result := (Length(Review) > 10) and ((Rating > 0) and (Rating <= 5));
end;



end.

