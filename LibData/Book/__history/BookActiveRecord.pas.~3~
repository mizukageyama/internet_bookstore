unit BookActiveRecord;

interface

uses
  MVCFramework.ActiveRecord, MVCFramework, MVCFramework.Serializer.Commons,
  MVCFramework.SQLGenerators.MySQL, BookContextIntf, ActiveRecordEntity, Book,
  MVCFramework.Nullables;

type
  [MVCNameCase(ncCamelCase)]
  [MVCTable('book')]
  TBookActiveRecord = class(TActiveRecordEntity, IBookContext)
  private
    [MVCTableField('ID', [foPrimaryKey, foAutoGenerated])]
    FId: NullableInt64;
    [MVCTableField('TITLE')]
    FTitle: NullableString;
    [MVCTableField('SYNOPSIS')]
    FSynopsis: NullableString;

    function GetBookId: Integer;
    procedure SetBookId(const BookId: Integer);

    function GetBookSynopsis: string;
    procedure SetBookSynopsis(const BookSypnosis: string);

    function GetBookTitle: string;
    procedure SetBookTitle(const BookTitle: string);
  public
    constructor Create; overload; override;
    constructor Create(const ABook: TBook); overload;

    property Id: Integer read GetBookId write SetBookId;
    property Title: string read GetBookTitle write SetBookTitle;
    property Synopsis: string read GetBookSynopsis write SetBookSynopsis;
  end;

implementation

{ TBook }

constructor TBookActiveRecord.Create(const ABook: TBook);
begin
  inherited Create(True);

  FId := ABook.Id;
  FTitle := ABook.Title;
  FSynopsis := ABook.Synopsis;
end;

constructor TBookActiveRecord.Create;
begin
  inherited Create(True);
end;

function TBookActiveRecord.GetBookId: Integer;
begin
  Result := FId;
end;

function TBookActiveRecord.GetBookSynopsis: string;
begin
  Result := FSynopsis;
end;

function TBookActiveRecord.GetBookTitle: string;
begin
  Result := FTitle;
end;

procedure TBookActiveRecord.SetBookId(const BookId: Integer);
begin
  FId := BookId;
end;

procedure TBookActiveRecord.SetBookSynopsis(const BookSypnosis: string);
begin
  FSynopsis := BookSypnosis;
end;

procedure TBookActiveRecord.SetBookTitle(const BookTitle: string);
begin
  FTitle := BookTitle;
end;

end.

