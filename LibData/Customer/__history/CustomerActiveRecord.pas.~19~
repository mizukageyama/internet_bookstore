unit CustomerActiveRecord;

interface

uses
  MVCFramework.ActiveRecord, MVCFramework, MVCFramework.Serializer.Commons,
  MVCFramework.SQLGenerators.MySQL, CustomerContextIntf, ActiveRecordEntity,
  Customer;

type
  [MVCNameCase(ncCamelCase)]
  [MVCTable('customer')]
  TCustomerActiveRecord = class(TActiveRecordEntity, ICustomerContext)
  private
    [MVCTableField('ID', [foPrimaryKey, foAutoGenerated])]
    FId: Integer;
    [MVCTableField('FIRST_NAME')]
    FFirstName: string;
    [MVCTableField('LAST_NAME')]
    FLastName: string;
    [MVCTableField('EMAIL')]
    FEmail: string;
    [MVCTableField('PASSWORD')]
    FPassword: string;

    function GetCustomerId: Integer;
    procedure SetCustomerId(const CustomerId: Integer);

    function GetFirstName: string;
    procedure SetFirstName(const CustomerFirstName: string);

    function GetLastName: string;
    procedure SetLastName(const CustomerLastName: string);

    function GetEmail: string;
    procedure SetEmail(const CustomerEmail: string);

    function GetPassword: string;
    procedure SetPassword(const CustomerPassword: string);
  public
    constructor Create; overload; override;
    constructor Create(const ACustomer: TCustomer); overload;

    function IsValid: Boolean;
    function IsPasswordMatched(const APassword: string): boolean;

    property Id: Integer read GetCustomerId write SetCustomerId;
    property FirstName: string read GetFirstName write SetFirstName;
    property LastName: string read GetLastName write SetLastName;
    property Email: string read GetEmail write SetEmail;
    [MVCDoNotSerialize]
    property Password: string read GetPassword write SetPassword;
  end;

implementation

{ TCustomer }

constructor TCustomerActiveRecord.Create(const ACustomer: TCustomer);
begin
  inherited Create(True);

  FId := ACustomer.Id;
  FFirstName := ACustomer.FirstName;
  FLastName := ACustomer.LastName;
  FEmail := ACustomer.Email;
  FPassword := ACustomer.Password;
end;

constructor TCustomerActiveRecord.Create;
begin
  inherited Create(True);
end;

function TCustomerActiveRecord.GetCustomerId: Integer;
begin
  Result := Id;
end;

procedure TCustomerActiveRecord.SetCustomerId(const CustomerId: Integer);
begin
  Id := CustomerId;
end;

function TCustomerActiveRecord.GetEmail: string;
begin
  Result := FEmail;
end;

procedure TCustomerActiveRecord.SetEmail(const CustomerEmail: string);
begin
  FEmail := CustomerEmail;
end;

function TCustomerActiveRecord.GetFirstName: string;
begin
  Result := FFirstName;
end;

procedure TCustomerActiveRecord.SetFirstName(const CustomerFirstName: string);
begin
  FFirstName := CustomerFirstName;
end;

function TCustomerActiveRecord.GetLastName: string;
begin
  Result := FLastName;
end;

function TCustomerActiveRecord.GetPassword: string;
begin
  Result := FPassword;
end;

function TCustomerActiveRecord.IsPasswordMatched(const APassword: string): boolean;
begin
  Result := Password = APassword;
end;

function TCustomerActiveRecord.IsValid: Boolean;
begin
  Result := (FirstName <> '') and
    (LastName <> '') and
    (Email <> '') and
    (Password <> '');
end;



procedure TCustomerActiveRecord.SetLastName(const CustomerLastName: string);
begin
  FLastName := CustomerLastName;
end;

procedure TCustomerActiveRecord.SetPassword(const CustomerPassword: string);
begin
  FPassword:= CustomerPassword;
end;

end.
