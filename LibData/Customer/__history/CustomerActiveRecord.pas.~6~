unit CustomerActiveRecord;

interface

uses
  MVCFramework.ActiveRecord, MVCFramework, MVCFramework.Serializer.Commons,
  MVCFramework.SQLGenerators.MySQL, CustomerContextIntf, ActiveRecordEntity,
  Customer;

type
  [MVCNameCase(ncCamelCase)]
  [MVCTable('customer')]
  TCustomerActiveRecord = class(TActiveRecordEntity, ICustomerContext)
  private
    [MVCTableField('ID', [foPrimaryKey, foAutoGenerated])]
    FId: Integer;
    [MVCTableField('FIRST_NAME')]
    FFirstName: string;
    [MVCTableField('LAST_NAME')]
    FLastName: string;
    [MVCTableField('EMAIL')]
    FEmail: string;
    [MVCTableField('PASSWORD')]
    FPassword: string;

    function GetCustomerId: Integer;
    procedure SetCustomerId(const CustomerId: Integer);

    function GetFirstName: string;
    procedure SetFirstName(const CustomerFirstName: string);

    function GetLastName: string;
    procedure SetLastName(const CustomerLastName: string);

    function GetEmail: string;
    procedure SetEmail(const CustomerEmail: string);

    function GetPassword: string;
    procedure SetPassword(const CustomerPassword: string);
  public
    function IsValid: Boolean;
    function IsPasswordMatched(const APassword: string): boolean;

    property Id: Integer read GetCustomerId write SetCustomerId;
    property FirstName: string read GetFirstName write SetFirstName;
    property LastName: string read GetLastName write SetLastName;
    property Email: string read GetEmail write SetEmail;
    [MVCDoNotSerialize]
    property Password: string read GetPassword write SetPassword;
  end;

implementation

{ TCustomer }

function TCustomerActiveRecord.IsPasswordMatched(const APassword: string): boolean;
begin
  Result := Password = APassword;
end;

function TCustomerActiveRecord.IsValid: Boolean;
begin
  Result := (FirstName <> '') and
    (LastName <> '') and
    (Email <> '') and
    (Password <> '');
end;

end.
