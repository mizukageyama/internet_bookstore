unit CustomerActiveRecordDAO;

interface

uses
  Customer, CustomerDAOIntf, MVCFramework, MVCFramework.Commons,
  MVCFramework.ActiveRecord, System.Generics.Collections, System.SysUtils;

type
  TCustomerActiveRecordDAO = class(TInterfacedObject, ICustomerDAO)
  public
    procedure Insert(const Customer: TCustomer);
    function Select: TObjectList<TCustomer>;
    function SelectWhereId(const CustomerId: Integer): TCustomer;
    procedure Update(const Customer: TCustomer);
    procedure Delete(const CustomerId: Integer);
  end;

implementation

uses
  CustomerActiveRecord, CustomerContextIntf;

{ TCustomerActiveRecordDAO }

procedure TCustomerActiveRecordDAO.Delete(const CustomerId: Integer);
begin
  var CustomerAR := TCustomerActiveRecord.Create;
  try
    CustomerAR.Id := CustomerId;
    CustomerAR.Delete(True);
  finally
    CustomerAR.Free;
  end;
end;

procedure TCustomerActiveRecordDAO.Insert(const Customer: TCustomer);
begin
  var CustomerAR := TCustomerActiveRecord.Create(Customer);
  try
    CustomerAR.Insert;
  finally
    CustomerAR.Free;
  end;
end;

function TCustomerActiveRecordDAO.Select: TObjectList<TCustomer>;
begin
  var CustomerAR := TCustomerActiveRecord.Create;
  var ARList := CustomerAR.All(TBookActiveRecord);
  var CustomerList := TObjectList<TCustomer>.Create;

  for var ARItem in ARList do
  begin
    var CustomerContext := ARItem As TCustomerActiveRecord;
    var Customer := TCustomer.Create(BookContext);
    CustomerList.Add(Customer);
  end;

  Result := CustomerList;
end;

function TCustomerActiveRecordDAO.SelectWhereId(
  const CustomerId: Integer): TCustomer;
begin
  var CustomerAR := TCustomerActiveRecord.Create;
  try
    if not CustomerAR.LoadByPK(BookId) then
      raise EMVCActiveRecordNotFound.Create(Classname + ': Customer with ' +
        'ID ' + BookId.ToString + ' not found');

    var Customer := TCustomer.Create(CustomerAR);
    Result := Customer;
  finally
    CustomerAR.Free;
  end;
end;

procedure TCustomerActiveRecordDAO.Update(const Customer: TCustomer);
begin
  var CustomerAR := TCustomerActiveRecord.Create(Customer);
  try
    CustomerAR.Update(True);
  finally
    CustomerAR.Free;
  end;
end;

end.
