unit CustomerReviewActiveRecord;

interface

uses
  MVCFramework.ActiveRecord, MVCFramework, MVCFramework.Serializer.Commons,
  MVCFramework.SQLGenerators.MySQL, CustomerReviewContextIntf,
  ActiveRecordEntity, CustomerReview;

type
  [MVCNameCase(ncCamelCase)]
  [MVCTable('customer_review')]
  TCustomerReviewActiveRecord = class(TActiveRecordEntity, ICustomerReviewContext)
  private
    [MVCTableField('ID', [foPrimaryKey, foAutoGenerated])]
    FId: Integer;
    [MVCTableField('CUSTOMER_ID')]
    FCustomerId: Integer;
    [MVCTableField('BOOK_ID')]
    FBookId: Integer;
    [MVCTableField('REVIEW')]
    FReview: string;
    [MVCTableField('RATING')]
    FRating: Integer;

    function GetCustomerReviewId: Integer;
    procedure SetCustomerReviewId(const CustomerReviewId: Integer);

    function GetCustomerReviewBookId: Integer;
    procedure SetCustomerReviewBookId(const BookId: Integer);

    function GetCustomerReviewCustomerId: Integer;
    procedure SetCustomerReviewCustomerId(const CustomerId: Integer);

    function GetReview: string;
    procedure SetReview(const Review: string);

    function GetCustomerReviewRating: Integer;
    procedure SetCustomerReviewRating(const Rating: Integer);
  public
    constructor Create; overload; override;
    constructor Create(const ACustomerReview: TCustomerReview); overload;

    property Id: Integer
      read GetCustomerReviewId write SetCustomerReviewId;
    property BookId: Integer
      read GetCustomerReviewBookId write SetCustomerReviewBookId;
    property CustomerId: Integer
      read GetCustomerReviewCustomerId write SetCustomerReviewCustomerId;
    property Review: string
      read GetReview write SetReview;
    property Rating: Integer
      read GetCustomerReviewRating write SetCustomerReviewRating;
  end;

implementation

{ TCustomerReviewActiveRecord }

constructor TCustomerReviewActiveRecord.Create(const ACustomerReview: TCustomerReview);
begin
  inherited Create(True);

  FId := ACustomerReview.Id;
  FCustomerId := ACustomerReview.CustomerId;
  FBookId := ACustomerReview.BookId;
  FReview := ACustomerReview.Review;
  FRating := ACustomerReview.Rating;
end;

constructor TCustomerReviewActiveRecord.Create;
begin
  inherited Create(True);
end;

function TCustomerReviewActiveRecord.GetCustomerReviewBookId: Integer;
begin
  Result := FBookId;
end;

procedure TCustomerReviewActiveRecord.SetCustomerReviewBookId(
  const BookId: Integer);
begin
  FBookId := BookId;
end;

function TCustomerReviewActiveRecord.GetCustomerReviewCustomerId: Integer;
begin
  Result := FCustomerId;
end;

procedure TCustomerReviewActiveRecord.SetCustomerReviewCustomerId(
  const CustomerId: Integer);
begin
  FCustomerId := CustomerId;
end;

function TCustomerReviewActiveRecord.GetCustomerReviewId: Integer;
begin
  Result := FId;
end;

procedure TCustomerReviewActiveRecord.SetCustomerReviewId(
  const CustomerReviewId: Integer);
begin
  FId := CustomerReviewId;
end;

function TCustomerReviewActiveRecord.GetCustomerReviewRating: Integer;
begin
  Result := FRating;
end;

procedure TCustomerReviewActiveRecord.SetCustomerReviewRating(
  const Rating: Integer);
begin
  FRating := Rating;
end;

function TCustomerReviewActiveRecord.GetReview: string;
begin
  Result := FReview;
end;

procedure TCustomerReviewActiveRecord.SetReview(const Review: string);
begin
  FReview := Review;
end;

end.
