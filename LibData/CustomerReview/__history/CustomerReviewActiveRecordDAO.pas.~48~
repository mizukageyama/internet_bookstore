unit CustomerReviewActiveRecordDAO;

interface

uses
  CustomerReview, CustomerReviewDAOIntf, MVCFramework, MVCFramework.Commons,
  MVCFramework.ActiveRecord, System.Generics.Collections, System.SysUtils;

type
  TCustomerReviewActiveRecordDAO = class(TInterfacedObject, ICustomerReviewDAO)
  public
    procedure Insert(const CustomerReview: TCustomerReview);
    function SelectWhereBookId(const CustomerReviewBookId: Integer):
      TObjectList<TCustomerReview>;
    function SelectWhereId(const CustomerReviewId: Integer): TCustomerReview;
    procedure Update(const CustomerReview: TCustomerReview);
    procedure Delete(const CustomerReviewId: Integer);
  end;

implementation

uses
  CustomerReviewActiveRecord, CustomerReviewContextIntf;

{ TCustomerReviewActiveRecordDAO }

procedure TCustomerReviewActiveRecordDAO.Delete(const CustomerReviewId: Integer);
begin
  var CustomerReviewAR := TCustomerReviewActiveRecord.Create;
  try
    CustomerReviewAR.Id := CustomerReviewId;
    CustomerReviewAR.Delete(True);
  finally
    CustomerReviewAR.Free;
  end;
end;

procedure TCustomerReviewActiveRecordDAO.Insert(const CustomerReview: TCustomerReview);
begin
  var CustomerReviewAR := TCustomerReviewActiveRecord.Create(CustomerReview);
  try
    CustomerReviewAR.Insert;
  finally
    CustomerReviewAR.Free;
  end;
end;

function TCustomerReviewActiveRecordDAO.SelectWhereBookId(
  const CustomerReviewBookId: Integer): TObjectList<TCustomerReview>;
begin
  var CustomerReviewAR := TCustomerReviewActiveRecord.Create;

//  var ARList := CustomerReviewAR.Where(TCustomerReviewActiveRecord,
//    'WHERE BookId = ?', [CustomerReviewBookId]);

  var ARList := CustomerReviewAR.SelectRQL(TCustomerReviewActiveRecord,
    'eq(BookId, "'+ CustomerReviewBookId.ToString +'")', -1);

  var CustomerReviewList := TObjectList<TCustomerReview>.Create;

  for var ARItem in ARList do
  begin
    var CustomerReviewContext := ARItem As TCustomerReviewActiveRecord;
    var CustomerReview := TCustomerReview.Create(CustomerReviewContext);
    CustomerReviewList.Add(CustomerReview);
  end;

  Result := CustomerReviewList;
end;

function TCustomerReviewActiveRecordDAO.SelectWhereId(
  const CustomerReviewId: Integer): TCustomerReview;
begin
  var CustomerReviewAR := TCustomerReviewActiveRecord.Create;
  try
    if not CustomerReviewAR.LoadByPK(CustomerReviewId) then
      raise EMVCActiveRecordNotFound.Create(Classname + ': Customer Review ' +
        'with ID ' + CustomerReviewId.ToString + ' not found');

    var CustomerReview := TCustomerReview.Create(CustomerReviewAR);
    Result := CustomerReview;
  finally
    CustomerReviewAR.Free;
  end;
end;

procedure TCustomerReviewActiveRecordDAO.Update(const CustomerReview: TCustomerReview);
begin
  var CustomerReviewAR := TCustomerReviewActiveRecord.Create(CustomerReview);
  try
    CustomerReviewAR.Update(True);
  finally
    CustomerReviewAR.Free;
  end;
end;

end.
