unit Book;

interface

uses
  BookContextIntf, JSON;

type
  TBook = class
  private
    FId: Integer;
    FTitle: string;
    FSynopsis: string;
  public
    constructor Create(const ABook: IBookContext); overload;
    constructor Create(const AId: Integer; const ATitle,
      ASynopsis: string); overload;

    function IsValid: Boolean;
    function ToJSONBody: string;

    procedure SetBookId(const BookId: Integer);
    procedure SetBookSynopsis(const BookSynopsis: string);
    procedure SetBookTitle(const BookTitle: string);

    property Id: Integer read FId write SetBookId;
    property Title: string read FTitle write SetBookTitle;
    property Synopsis: string read FSynopsis write SetBookSynopsis;
  end;

implementation

uses
  System.SysUtils;

{ TBook }

constructor TBook.Create(const AId: Integer; const ATitle, ASynopsis: string);
begin
  inherited Create;

  FId := AId;
  FTitle := ATitle;
  FSynopsis := ASynopsis;
end;

constructor TBook.Create(const ABook: IBookContext);
begin
  if not Assigned(ABook) then
    raise EArgumentNilException.Create('ABook');

  inherited Create;

  FId := ABook.Id;
  FTitle := ABook.Title;
  FSynopsis := ABook.Synopsis;
end;

function TBook.IsValid: Boolean;
begin
  Result := (string.IsNullOrEmpty(Title)) and (Synopsis <> '');
end;

procedure TBook.SetBookId(const BookId: Integer);
begin
  FId := BookId;
end;

procedure TBook.SetBookSynopsis(const BookSynopsis: string);
begin
  FSynopsis := BookSynopsis;
end;

procedure TBook.SetBookTitle(const BookTitle: string);
begin
  FTitle := BookTitle;
end;

function TBook.ToJSONBody: string;
begin
  var JSONBody := TJSONObject.Create;
  try
    JSONBody.AddPair('Id', Id);
    JSONBody.AddPair('Title', Title);
    JSONBody.AddPair('Synopsis', Synopsis);

    Result := JSONBody.ToString;
  finally
    JSONBody.Free;
  end;
end;

end.
