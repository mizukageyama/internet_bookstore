unit Customer;

interface

uses
  CustomerContextIntf;

type
  TCustomer = class
  private
    FId: Integer;
    FFirstName: string;
    FLastName: string;
    FEmail: string;
    FPassword: string;
    function GetPassword: string;
    procedure SetPassword(const CustomerPassword: string);
  public
    constructor Create(const ACustomer: ICustomerContext); overload;
    constructor Create(const AId: Integer; const AFirstName, ALastName,
      AEmail, APassword: string); overload;

    function IsValid: Boolean;
    function IsPasswordMatched(const APassword: string): boolean;

    function GetCustomerId: Integer;
    procedure SetCustomerId(const CustomerId: Integer);

    function GetFirstName: string;
    procedure SetFirstName(const CustomerFirstName: string);

    function GetLastName: string;
    procedure SetLastName(const CustomerLastName: string);

    function GetEmail: string;
    procedure SetEmail(const CustomerEmail: string);
  public
    property Id: Integer read GetCustomerId write SetCustomerId;
    property FirstName: string read GetFirstName write SetFirstName;
    property LastName: string read GetLastName write SetLastName;
    property Email: string read GetEmail write SetEmail;
    property Password: string read GetPassword;
  end;

implementation

uses
  System.SysUtils;

{ TCustomer }

constructor TCustomer.Create(const AId: Integer; const AFirstName, ALastName,
  AEmail, APassword: string);
begin
  inherited Create;

  FId := AId;
  FFirstName := AFirstName;
  FLastName := ALastName;
  FEmail := AEmail;
  FPassword := APassword;
end;

constructor TCustomer.Create(const ACustomer: ICustomerContext);
begin
  if not Assigned(ACustomer) then
    raise EArgumentNilException.Create('ACustomer');

  inherited Create;

  FId := ACustomer.Id;
  FFirstName := ACustomer.FirstName;
  FLastName := ACustomer.LastName;
  FEmail := ACustomer.Email;
  FPassword := ACustomer.Password;
end;

function TCustomer.IsPasswordMatched(const APassword: string): boolean;
begin
  Result := Password = APassword;
end;

function TCustomer.IsValid: Boolean;
begin
  Result := (FirstName <> '') and
    (LastName <> '') and
    (Email <> '') and
    (Password <> '');
end;

function TCustomer.GetCustomerId: Integer;
begin
  Result := FId;
end;

procedure TCustomer.SetCustomerId(const CustomerId: Integer);
begin
  FId := CustomerId;
end;

function TCustomer.GetEmail: string;
begin
  Result := FEmail;
end;

procedure TCustomer.SetEmail(const CustomerEmail: string);
begin
  FEmail := CustomerEmail;
end;

function TCustomer.GetFirstName: string;
begin
  Result := FFirstName;
end;

procedure TCustomer.SetFirstName(const CustomerFirstName: string);
begin
  FFirstName := CustomerFirstName;
end;

function TCustomer.GetLastName: string;
begin
  Result := FLastName;
end;

procedure TCustomer.SetLastName(const CustomerLastName: string);
begin
  FLastName := CustomerLastName;
end;

function TCustomer.GetPassword: string;
begin
  Result := FPassword;
end;

procedure TCustomer.SetPassword(const CustomerPassword: string);
begin
  FPassword:= CustomerPassword;
end;

end.
