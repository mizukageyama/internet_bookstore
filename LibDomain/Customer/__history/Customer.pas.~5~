unit Customer;

interface

uses
  CustomerContextIntf;

type
  TCustomer = class
  private
    FId: Integer;
    FFirstName: string;
    FLastName: string;
    FEmail: string;
    FPassword: string;
  public
    constructor Create(const ABook: ICustomerContext); overload;
    constructor Create(const AId: Integer; const ATitle,
      ASynopsis: string); overload;

    function GetCustomerId: Integer;
    procedure SetCustomerId(const CustomerId: Integer);

    function GetFirstName: string;
    procedure SetFirstName(const CustomerFirstName: string);

    function GetLastName: string;
    procedure SetLastName(const CustomerLastName: string);

    function GetEmail: string;
    procedure SetEmail(const CustomerEmail: string);

    function GetPassword: string;
    procedure SetPassword(const CustomerPassword: string);

    function IsValid: Boolean;
    function IsPasswordMatched(const APassword: string): boolean;

    property Id: Integer read GetCustomerId write SetCustomerId;
    property FirstName: string read GetFirstName write SetFirstName;
    property LastName: string read GetLastName write SetLastName;
    property Email: string read GetEmail write SetEmail;
    property Password: string read GetPassword write SetPassword;
  end;

implementation

{ TCustomer }

function TCustomer.IsPasswordMatched(const APassword: string): boolean;
begin
  Result := Password = APassword;
end;

function TCustomer.IsValid: Boolean;
begin
  Result := (FirstName <> '') and
    (LastName <> '') and
    (Email <> '') and
    (Password <> '');
end;

end.
