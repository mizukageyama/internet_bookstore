unit CustomerReview;

interface

uses
  CustomerContextIntf;

type
  TCustomerReview = class
  private
    FId: Integer;
    FCustomerId: Integer;
    FBookId: Integer;
    FReview: string;
    FRating: Integer;
  public
    constructor Create(const ACustomer: ICustomerContext); overload;
    constructor Create(const AId: Integer; const AFirstName, ALastName,
      AEmail, APassword: string); overload;

    function IsValid: Boolean;
    function IsMoreThan1MB: Boolean;
    function IsTooShort: Boolean;

    property Id: Integer read FId write FId;
    property BookId: Integer read FBookId write FBookId;
    property CustomerId: Integer read FCustomerId write FCustomerId;
    property Review: string read FReview write FReview;
    property Rating: Integer read FRating write FRating;
  end;
  private
    FId: Integer;
    FFirstName: string;
    FLastName: string;
    FEmail: string;
    FPassword: string;
  end;

implementation

uses
  System.SysUtils;

{ TCustomerReview }

constructor TCustomerReview.Create(const AId: Integer; const AFirstName, ALastName,
  AEmail, APassword: string);
begin
  inherited Create;

  FId := AId;
  FFirstName := AFirstName;
  FLastName := ALastName;
  FEmail := AEmail;
  FPassword := APassword;
end;

constructor TCustomerReview.Create(const ACustomer: ICustomerContext);
begin
  if not Assigned(ACustomer) then
    raise EArgumentNilException.Create('ACustomer');

  inherited Create;

  FId := ACustomer.Id;
  FFirstName := ACustomer.FirstName;
  FLastName := ACustomer.LastName;
  FEmail := ACustomer.Email;
  FPassword := ACustomer.Password;
end;

function TCustomerReview.IsPasswordMatched(const APassword: string): boolean;
begin
  Result := Password = APassword;
end;

function TCustomerReview.IsValid: Boolean;
begin
  Result := (FirstName <> '') and
    (LastName <> '') and
    (Email <> '') and
    (Password <> '');
end;

end.
