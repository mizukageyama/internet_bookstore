unit AuthCriteria;

interface

uses
  System.Generics.Collections, FireDAC.Comp.Client, MVCFramework.ActiveRecord,
  MVCFramework, System.StrUtils, System.SysUtils, MVCFramework.Commons;

type
  TAuthCriteria = class(TInterfacedObject, IMVCAuthenticationHandler)
  public
    procedure OnRequest(const AContext: TWebContext;
      const AControllerQualifiedClassName, AActionName: string;
      var AAuthenticationRequired: Boolean);
    procedure OnAuthentication(const AContext: TWebContext; const AUserName,
      APassword: string; AUserRoles: TList<string>; var AIsValid: Boolean;
      const ASessionData: TDictionary<string, string>);
    procedure OnAuthorization(const AContext: TWebContext;
      AUserRoles: TList<string>; const AControllerQualifiedClassName: string;
      const AActionName: string; var AIsAuthorized: Boolean);
 end;

implementation

uses
  CustomerActiveRecord, Customer;

procedure TAuthCriteria.OnRequest(const AContext: TWebContext;
  const AControllerQualifiedClassName, AActionName: string;
  var AAuthenticationRequired: Boolean);
begin
  if (AContext.Request.HTTPMethod in [httpPOST, httpPUT, httpDELETE]) then
    AAuthenticationRequired := True
  else
    AAuthenticationRequired := False;
end;

procedure TAuthCriteria.OnAuthentication(const AContext: TWebContext;
  const AUserName, APassword: string; AUserRoles: TList<string>;
  var AIsValid: Boolean; const ASessionData: TDictionary<string, string>);
begin
  inherited;
  var CustomerAR := TCustomerActiveRecord.Create;

  var CustomerList := CustomerAR.Where(TCustomerActiveRecord,
    ' WHERE EMAIL = ?', [AUserName]);

  if CustomerList.Count	<> 0 then
  begin
    var Customer := TCustomer.Create(CustomerList[0] as TCustomerActiveRecord);
    AIsValid := Customer.IsPasswordMatched(APassword);

    if not AIsValid then
    begin
      Exit;
    end;

    AIsValid := True;
    ASessionData.AddOrSetValue('customer_id', Customer.Id.ToString);
  end
  else
    AIsValid := False;

  try
   // var Customer := TCustomer.Create(CustomerAR);
   // AIsValid := Assigned(Customer) and Customer.IsPasswordMatched(APassword);
//    if not AIsValid then
//    begin
//      Exit;
//    end;
    //Let's save in the custom claims the user's user_id
    AIsValid := True;
    //ASessionData.AddOrSetValue('customer_id', Customer.Id.ToString);
  finally
    //LCustomer.Free;
    //ActiveRecordConnectionsRegistry.RemoveDefaultConnection;
  end;
end;

procedure TAuthCriteria.OnAuthorization(const AContext: TWebContext;
  AUserRoles: TList<string>; const AControllerQualifiedClassName: string;
  const AActionName: string; var AIsAuthorized: Boolean);
begin
  AIsAuthorized := True;
end;

end.
