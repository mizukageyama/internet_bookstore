unit BookServiceTest;

interface

uses
  DUnitX.TestFramework, BookService, BookActiveRecordDaoStub, BookDaoIntf,
  BookServiceIntf, Book, MockBookTableDatabase;

type
  [TestFixture]
  TBookServiceTest = class
  private
    FBookService: IBookService;
    FMockBookDAO: IBookDAO;
  public
    [Setup]
    procedure Setup;
    [TearDown]
    procedure TearDown;

    [Test]
    procedure TestAddBook;
    [Test]
    procedure TestGetAllBooks;
    [Test]
    procedure TestGetBookById;
    [Test]
    procedure TestUpdateBook;
    [Test]
    procedure TestDeleteBook;
  end;

implementation

procedure TBookServiceTest.Setup;
begin
  FMockBookDAO := TBookActiveRecordDaoStub.Create;
  FBookService := TBookService.Create(FMockBookDAO);
end;

procedure TBookServiceTest.TearDown;
begin
  FBookService := nil;
  FMockBookDAO := nil;
end;

procedure TBookServiceTest.TestAddBook;
begin
  var Book := TBook.Create;
  Book.Title := '';
  Book.Synopsis := '';

  var ListBeforeInsert := FBookService.GetBooks;
  FBookService.CreateBook(Book);

  var ListAfterInsert := FBookService.GetBooks;

  Assert.AreEqual<Integer>(ListAfterInsert.Count, ListBeforeInsert.Count + 1);
end;

procedure TBookServiceTest.TestGetAllBooks;
begin
  var BookList := FBookService.GetBooks;

  Assert.IsNotNull(BookList);
end;

procedure TBookServiceTest.TestGetBookById;
begin
  var BookId := 1;
  var Book := FBookService.GetBookById(BookId);

  Assert.IsNotNull(Book, 'Book should not be nil');
  Assert.AreEqual(BookId, Book.Id, 'Book ID should match');
end;

procedure TBookServiceTest.TestUpdateBook;
begin
  // Write test for UpdateBook method of BookService
end;

procedure TBookServiceTest.TestDeleteBook;
begin
  var BookId := 1;

  FBookService.DeleteBook(BookId);

  Assert.IsFalse(MockDatabase.Contains(BookId), 'Book should be deleted');
end;

initialization
  TDUnitX.RegisterTestFixture(TBookServiceTest);

end.
