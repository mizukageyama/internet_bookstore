unit MockMainPresenter;

interface

uses
  MainPresenterIntf, Forms, BookServiceIntf, System.Generics.Collections;

type
  TMockMainPresenter = class(TInterfacedObject, IMainPresenter)
  private
    FMainView: TForm;
    FBookServiceProxy: IBookService;
    FBookList: TList<TObject>;
  public
    constructor Create(AMainView: TForm; AMainService: IBookService);
    procedure LoadBooks;
    procedure ShowBookDetails;
    function GetBookList: TList<TObject>;
    function GetBookClass: TClass;
  end;

implementation

{ TMockMainPresenter }

constructor TMockMainPresenter.Create(AMainView: TForm;
  AMainService: IBookService);
begin
  FMainView := AMainView;
  FBookServiceProxy := AMainService;
  FBookList := TList<TObject>.Create;
end;

function TMockMainPresenter.GetBookClass: TClass;
begin

end;

function TMockMainPresenter.GetBookList: TList<TObject>;
begin

end;

procedure TMockMainPresenter.LoadBooks;
begin
  for var Book in FBookServiceProxy.GetBooks do
      FBookList.Add(Book);
end;

procedure TMockMainPresenter.ShowBookDetails;
begin

end;

end.
