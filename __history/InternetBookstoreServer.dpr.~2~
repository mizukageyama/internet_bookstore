program InternetBookstoreServer;

{$APPTYPE CONSOLE}

uses
  System.SysUtils,
  MVCFramework,
  MVCFramework.Logger,
  MVCFramework.Commons,
  MVCFramework.Signal,
  Web.ReqMulti,
  Web.WebReq,
  Web.WebBroker,
  IdContext,
  IdHTTPWebBrokerBridge,
  MyController in 'MyController.pas',
  WebModule in 'WebModule.pas' {MyWebModule: TWebModule},
  Book in 'Book\Book.pas',
  BookController in 'Book\BookController.pas',
  BaseController in 'BaseController.pas',
  BookDAO in 'Book\BookDAO.pas',
  BookDAOIntf in 'Book\BookDAOIntf.pas',
  Customer in 'Customer\Customer.pas',
  CustomerReview in 'CustomerReview\CustomerReview.pas',
  CustomerDAOIntf in 'Customer\CustomerDAOIntf.pas',
  CustomerDAO in 'Customer\CustomerDAO.pas',
  CustomerReviewDAOIntf in 'CustomerReview\CustomerReviewDAOIntf.pas',
  CustomerReviewController in 'CustomerReview\CustomerReviewController.pas',
  CustomerReviewDAO in 'CustomerReview\CustomerReviewDAO.pas',
  CustomerController in 'Customer\CustomerController.pas',
  InternetBookstoreController in 'InternetBookstoreController.pas',
  AuthCriteria in 'jwt_authentication\AuthCriteria.pas';

{$R *.res}


procedure RunServer(APort: Integer);
var
  LServer: TIdHTTPWebBrokerBridge;
begin
  Writeln('** DMVCFramework Server ** build ' + DMVCFRAMEWORK_VERSION);
  LServer := TIdHTTPWebBrokerBridge.Create(nil);
  try
    LServer.OnParseAuthentication := TMVCParseAuthentication.OnParseAuthentication;
    LServer.DefaultPort := APort;
    LServer.KeepAlive := True;

    { more info about MaxConnections
      http://ww2.indyproject.org/docsite/html/frames.html?frmname=topic&frmfile=index.html }
    LServer.MaxConnections := 0;

    { more info about ListenQueue
      http://ww2.indyproject.org/docsite/html/frames.html?frmname=topic&frmfile=index.html }
    LServer.ListenQueue := 200;

    LServer.Active := True;
    WriteLn('Listening on port ', APort);
    Write('CTRL+C to shutdown the server');
    WaitForTerminationSignal;
    EnterInShutdownState;
    LServer.Active := False;
  finally
    LServer.Free;
  end;
end;

begin
  ReportMemoryLeaksOnShutdown := True;
  IsMultiThread := True;
  // DMVCFramework Specific Configuration
  // When MVCSerializeNulls = True empty nullables and nil are serialized as json null.
  // When MVCSerializeNulls = False empty nullables and nil are not serialized at all.
  MVCSerializeNulls := True;
  try
    if WebRequestHandler <> nil then
      WebRequestHandler.WebModuleClass := WebModuleClass;
    WebRequestHandlerProc.MaxConnections := 1024;
    RunServer(8080);
  except
    on E: Exception do
      Writeln(E.ClassName, ': ', E.Message);
  end;
end.
