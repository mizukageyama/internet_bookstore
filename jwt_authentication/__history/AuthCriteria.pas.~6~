unit AuthCriteria;

interface

uses
  System.Generics.Collections, FireDAC.Comp.Client, MVCFramework.ActiveRecord,
  MVCFramework, System.StrUtils, System.SysUtils;

type
  TAuthCriteria = class(TInterfacedObject, IMVCAuthenticationHandler)
  public
    procedure OnRequest(const AContext: TWebContext;
      const AControllerQualifiedClassName, AActionName: string;
      var AAuthenticationRequired: Boolean);
    procedure OnAuthentication(const AContext: TWebContext; const AUserName,
      APassword: string; AUserRoles: TList<string>; var AIsValid: Boolean;
      const ASessionData: TDictionary<string, string>);
    procedure OnAuthorization(const AContext: TWebContext;
      AUserRoles: TList<string>; const AControllerQualifiedClassName: string;
      const AActionName: string; var AIsAuthorized: Boolean);
 end;

implementation

uses
  Customer;

procedure TAuthCriteria.OnRequest(const AContext: TWebContext;
  const AControllerQualifiedClassName, AActionName: string;
  var AAuthenticationRequired: Boolean);
begin
  AAuthenticationRequired := True;
end;

procedure TAuthCriteria.OnAuthentication(const AContext: TWebContext;
  const AUserName, APassword: string; AUserRoles: TList<string>;
  var AIsValid: Boolean; const ASessionData: TDictionary<string, string>);
var
  LConn: TFDConnection;
  LCustomer: TCustomer;
begin
  inherited;

  LConn := TFDConnection.Create(nil);
  LConn.ConnectionDefName := 'Internet_Bookstore_Connection';
  ActiveRecordConnectionsRegistry.AddDefaultConnection(LConn, True);

  LCustomer := TMVCActiveRecord.GetOneByWhere<TCustomer>('email = ?',
    [AUserName], False);

  try
    AIsValid := Assigned(LCustomer) and LCustomer.IsPasswordMatched(APassword);
    if not AIsValid then
    begin
      Exit;
    end;
    //Let's save in the custom claims the user's user_id
    ASessionData.AddOrSetValue('user_id', LCustomer.ID.ToString);
  finally
    LCustomer.Free;
    ActiveRecordConnectionsRegistry.RemoveDefaultConnection;
  end;
end;

procedure TAuthCriteria.OnAuthorization(const AContext: TWebContext;
  AUserRoles: TList<string>; const AControllerQualifiedClassName: string;
  const AActionName: string; var AIsAuthorized: Boolean);
begin
  AIsAuthorized := False;

  if AUserRoles.Contains('employee') then
  begin
    AIsAuthorized := True;
    Exit;
  end
  else
  begin
    {
      Permissions for GUESTS are:
      1. UserController - Change Password Only
      2. Author - GET request only
      3. Books - GET request only
    }

    AIsAuthorized := ((AControllerQualifiedClassName =
      'UserControllerU.TUserController') and
      (AActionName = 'ChangeCurrentUserPassword')) or
      ((AControllerQualifiedClassName = 'AuthorControllerU.TAuthorController')
      and (AContext.Request.HTTPMethodAsString = 'GET')) or
      ((AControllerQualifiedClassName = 'BookControllerU.TBookController')
      and (AContext.Request.HTTPMethodAsString = 'GET'));
  end;
end;

end.
